{"version":3,"file":"static/js/129.a774acc6.chunk.js","mappings":"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","sources":["components/BackLinkButton/BackLinkButton.jsx","components/BackLinkButton/BackLinkButton.styled.jsx","pages/Home/Home.styled.jsx","pages/MoviesDetails/MoviesDetails.styled.jsx","pages/TVShowsDetails/TVShowsDetails.jsx","utils/constants.js","utils/fetchData.js","utils/functions.js"],"sourcesContent":["import { Link } from 'react-router-dom';\nimport { Button } from './BackLinkButton.styled';\nimport { FaLongArrowAltLeft } from 'react-icons/fa';\n\nexport const BackLinkButton = ({ backLinkHref }) => {\n  return (\n    <Link to={backLinkHref}>\n      <Button>\n        <FaLongArrowAltLeft />\n        Go back\n      </Button>\n    </Link>\n  );\n};\n","import styled from 'styled-components';\n\nexport const Button = styled.button`\n  display: flex;\n  gap: 7px;\n  justify-content: center;\n  align-items: center;\n  min-width: 90px;\n  height: 25px;\n  background-color: lightseagreen;\n  border-radius: 5px;\n  border-color: lightseagreen;\n  font-size: medium;\n  &: hover {\n    cursor: pointer;\n    color: darkblue;\n  }\n`;\n","import styled from 'styled-components';\n\nexport const Container = styled.main`\n  padding-left: 20px;\n  padding-top: 5px;\n  background-color: cadetblue;\n`;\n\nexport const SortThumb = styled.div`\n  padding-top: 10px;\n`;\n\nexport const TitleBox = styled.div`\n  display: flex;\n  justify-content: space-around;\n  max-width: 500px;\n  padding: 5px 0 5px 0;\n`;\n\nexport const Title = styled.h1`\n  font-size: xx-large;\n`;\n","import styled from 'styled-components';\n\nexport const InfoBox = styled.div`\n  max-width: 500px;\n  margin-left: 20px;\n`;\n\nexport const Box = styled.div`\n  display: flex;\n  flex-wrap: wrap;\n  padding-bottom: 5px;\n`;\n\nexport const MoreInfoBox = styled.div`\n  display: flex;\n  align-items: center;\n  text-align: center;\n  flex-direction: column;\n  background-color: lightseagreen;\n  padding: 5px 0 10px 20px;\n`;\n\nexport const ImageFilm = styled.img`\n  @media (max-width: 500px) {\n    width: 400px;\n  }\n  @media (max-width: 400px) {\n    width: 350px;\n  }\n`;\n\nexport const Thumb = styled.div`\n  display: flex;\n  gap: 50px;\n`;\nexport const GenreList = styled.ul`\n  display: flex;\n  gap: 10px;\n`;\n\nexport const BoxInside = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 5px;\n`;\n\nexport const MediumTitle = styled.h2`\n  padding-left: 0px;\n  margin: 7px 0 7px 0;\n  font-size: x-large;\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect, Suspense } from 'react';\nimport { Outlet, useLocation } from 'react-router-dom';\nimport { Container, Title } from 'pages/Home/Home.styled';\nimport { BackLinkButton } from 'components/BackLinkButton/BackLinkButton';\nimport { fetchData, getImageUrl } from 'utils/fetchData';\nimport { formateDate, voteToPersent } from 'utils/functions';\nimport { searchParams, basicURL } from 'utils/constants';\nimport { StyledNavLink } from 'components/SharedLayout/SharedLayout.styled';\n\nimport {\n  MediumTitle,\n  GenreList,\n  BoxInside,\n  ImageFilm,\n  Box,\n  Thumb,\n  InfoBox,\n  MoreInfoBox,\n} from '../MoviesDetails/MoviesDetails.styled';\n\nexport default function TVShowsDetails() {\n  const [movie, setMovie] = useState(null);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n\n  const backLinkHref = location.state?.from ?? '/';\n\n  useEffect(() => {\n    const URL = `${basicURL}/tv/${id}?${searchParams}`;\n    fetchData(URL, setMovie, setError);\n  }, [id]);\n\n  if (movie) {\n    console.log(movie);\n\n    const {\n      backdrop_path,\n      title,\n      first_air_date,\n      last_air_date,\n      vote_average,\n      overview,\n      genres,\n    } = movie;\n\n    return (\n      <Container>\n        <Box>\n          <BoxInside>\n            <BackLinkButton backLinkHref={backLinkHref} />\n            <ImageFilm src={getImageUrl(backdrop_path)} alt={title} />\n          </BoxInside>\n          <InfoBox>\n            <Title>{title}</Title>\n            <p>User score: {voteToPersent(vote_average)}</p>\n            <p>First air date: {formateDate(first_air_date)}</p>\n            <p>Last air date: {formateDate(last_air_date)}</p>\n            <MediumTitle>Overview</MediumTitle>\n            <p>{overview}</p>\n            <MediumTitle>Genres</MediumTitle>\n            <GenreList>\n              {genres.map(({ id, name }) => (\n                <li key={id}>{name}</li>\n              ))}\n            </GenreList>\n          </InfoBox>\n        </Box>\n        <MoreInfoBox>\n          <MediumTitle>Additionals information</MediumTitle>\n          <Thumb>\n            <StyledNavLink\n              to=\"get-tv-credits\"\n              state={{ from: location.state?.from }}\n              activeclassname=\"active\"\n            >\n              Cast\n            </StyledNavLink>\n            <StyledNavLink\n              to=\"get-tv-reviews\"\n              state={{ from: location.state?.from }}\n              activeclassname=\"active\"\n            >\n              Reviews\n            </StyledNavLink>\n          </Thumb>\n        </MoreInfoBox>\n        <Suspense fallback={<div>Loading subpage...</div>}>\n          <Outlet />\n        </Suspense>\n      </Container>\n    );\n  }\n  return <Container>{error ? error.message : <p>Searching...</p>}</Container>;\n}\n","export const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n\nexport const searchParams = new URLSearchParams({\n  api_key: API_KEY,\n  language: 'en',\n});\n\nexport const basicURL = 'https://api.themoviedb.org/3';\n\nexport const basicBigImageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const basicSmallImageURL = 'https://image.tmdb.org/t/p/w200';\n","import {\n  searchParams,\n  basicURL,\n  basicSmallImageURL,\n  basicBigImageURL,\n} from './constants';\nimport hasNotPhotoPerson from '../images/NoPhotoPerson.png';\nimport hasNotFilmImage from '../images/NoFilmImage.png';\n\nexport function fetchData(url, setData, setError) {\n  fetch(url)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong....'));\n    })\n    .then(data => {\n      setData(data);\n    })\n    .catch(error => {\n      setError(error);\n    });\n}\n\nexport function fetchImage(imageUrl, setHoveredImageUrl) {\n  const fetchUrl = basicSmallImageURL + imageUrl;\n\n  fetch(fetchUrl)\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => setHoveredImageUrl(url))\n    .catch(error => console.error(error));\n}\n\nexport function getImageUrl(imagePath, small = false, type = 'person') {\n  if (imagePath) {\n    return small\n      ? basicSmallImageURL + imagePath\n      : basicBigImageURL + imagePath;\n  } else {\n    return type === 'person' ? hasNotPhotoPerson : hasNotFilmImage;\n  }\n}\n\nexport function getExtraInfoUrl(id, type, dataType) {\n  const mediaType = type === 'tv' ? 'tv' : 'movie';\n  const dataAltType = dataType === 'cast' ? 'credits' : 'reviews';\n  const URL = `${basicURL}/${mediaType}/${id}/${dataAltType}?${searchParams}`;\n  return URL;\n}\n\nexport function getTrendsUrl(type, period, language = 'en') {\n  const newSearchParams = new URLSearchParams(searchParams);\n  newSearchParams.set('language', language);\n  const mediaType =\n    type === 'tv' ? 'tv' : type === 'person' ? 'person' : 'movie';\n  const URL = `${basicURL}/trending/${mediaType}/${period}?${newSearchParams}`;\n  return URL;\n}\n","export function voteToPersent(vote) {\n  if (vote) {\n    const persentVote = Math.floor(vote * 10);\n    return `${persentVote}%`;\n  }\n  return '--%';\n}\n\nexport function formateDate(date) {\n  if (date) {\n    const newDate = new Date(date);\n    const formattedDate = newDate.toUTCString().slice(5, 16);\n    return formattedDate;\n  }\n  return 'no data';\n}\n\nexport function sortByField(arr, field, order = false) {\n  const direction = order ? 1 : -1;\n  return arr.sort((a, b) => {\n    if (a[field] < b[field]) {\n      return -1 * direction;\n    }\n    if (a[field] > b[field]) {\n      return 1 * direction;\n    }\n    return 0;\n  });\n}\n\nexport function makeNewArray(arr) {\n  const newArr = arr.map(item => {\n    if (item !== null) {\n      return { ...item };\n    } else {\n      return item;\n    }\n  });\n  return newArr;\n}\n\nexport function makeWithoutLowVotes(arr) {\n  const newArr = arr.map(item => {\n    if (item.vote_count < 10) {\n      return { ...item, vote_average: 0 };\n    } else {\n      return item;\n    }\n  });\n  return newArr;\n}\n\nexport function toggleOrder(order) {\n  return !order;\n}\n\nexport const getSortedFilmography = (fieldSorted, cast, order) => {\n  let sortedFilmography;\n\n  switch (fieldSorted) {\n    case 'Trends':\n      sortedFilmography = cast;\n      break;\n    case 'Rating':\n      const withoutLowVotes = makeWithoutLowVotes(cast);\n      sortedFilmography = sortByField(withoutLowVotes, 'vote_average', order);\n      break;\n    case 'Date':\n      const newArrayByDate = makeNewArray(cast);\n      sortedFilmography = sortByField(newArrayByDate, 'release_date', order);\n      break;\n    case 'Title':\n      const newArrayByTitle = makeNewArray(cast);\n      sortedFilmography = sortByField(newArrayByTitle, 'title', order);\n      break;\n\n    default:\n      sortedFilmography = cast;\n  }\n\n  return sortedFilmography;\n};\n\nexport function removeDuplicates(arr) {\n  const uniqueArr = [];\n\n  arr.forEach(({ author, content }) => {\n    if (\n      !uniqueArr.find(\n        item => item.author === author && item.content === content\n      )\n    ) {\n      uniqueArr.push({ author, content });\n    }\n  });\n\n  return uniqueArr;\n}\n\nexport const getTrendingTitle = (period, type) => {\n  let mediaType;\n\n  switch (type) {\n    case 'tv':\n      mediaType = 'TV Shows';\n      break;\n    case 'movie':\n      mediaType = 'Movies';\n      break;\n    case 'person':\n      mediaType = 'People';\n      break;\n    default:\n      mediaType = 'Movies';\n  }\n\n  const timePeriod = period === 'week' ? 'week' : 'today';\n  return `${mediaType} trending ${timePeriod}`;\n};\n"],"names":["BackLinkButton","backLinkHref","to","Button","styled","Container","SortThumb","Title","InfoBox","Box","MoreInfoBox","ImageFilm","Thumb","GenreList","BoxInside","MediumTitle","TVShowsDetails","useState","movie","setMovie","error","setError","id","useParams","location","useLocation","state","from","useEffect","URL","basicURL","searchParams","fetchData","console","log","backdrop_path","title","first_air_date","last_air_date","vote_average","overview","genres","src","getImageUrl","alt","voteToPersent","formateDate","map","name","activeclassname","Suspense","fallback","message","API_KEY","process","URLSearchParams","api_key","language","basicBigImageURL","basicSmallImageURL","url","setData","fetch","then","response","ok","json","Promise","reject","Error","data","catch","fetchImage","imageUrl","setHoveredImageUrl","fetchUrl","blob","createObjectURL","imagePath","small","type","hasNotPhotoPerson","hasNotFilmImage","getExtraInfoUrl","dataType","mediaType","dataAltType","getTrendsUrl","period","newSearchParams","set","vote","persentVote","Math","floor","date","Date","toUTCString","slice","sortByField","arr","field","order","direction","sort","a","b","makeNewArray","item","getSortedFilmography","fieldSorted","cast","sortedFilmography","vote_count","removeDuplicates","uniqueArr","forEach","author","content","find","push","getTrendingTitle","timePeriod"],"sourceRoot":""}