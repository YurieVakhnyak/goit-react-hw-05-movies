{"version":3,"file":"static/js/164.de08912a.chunk.js","mappings":"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","sources":["components/MovieReviews/MovieReviews.styled.jsx","components/TVReviews/TVReviews.jsx","utils/constants.js","utils/fetchData.js","utils/functions.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const ReviewTitle = styled.h3`\n  margin: 5px 0 10px 20px;\n  font-weight: 500;\n`;\nexport const TextReview = styled.p`\n  margin-left: 20px;\n  font-weight: 400;\n  font-size: small;\n  column-gap: 5px;\n  column-count: 1;\n\n  @media (min-width: 550px) {\n    column-count: 2;\n  }\n  @media (min-width: 900px) {\n    column-count: 3;\n  }\n  @media (min-width: 1400px) {\n    column-count: 4;\n  }\n`;\n","import { useParams } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport {\n  ReviewTitle,\n  TextReview,\n} from 'components/MovieReviews/MovieReviews.styled';\nimport { fetchData, getExtraInfoUrl } from 'utils/fetchData';\nimport { removeDuplicates } from 'utils/functions';\nimport { nanoid } from 'nanoid';\n\nexport default function TVReviews() {\n  const [movieReviews, setMovieReviews] = useState(null);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n\n  useEffect(() => {\n    const URL = getExtraInfoUrl(id, 'tv', 'reviews');\n    fetchData(URL, setMovieReviews, setError);\n  }, [id]);\n\n  if (movieReviews) {\n    const { results } = movieReviews;\n    const uniqueResults = removeDuplicates(results);\n\n    if (uniqueResults.length > 0) {\n      return (\n        <div>\n          <ul>\n            {uniqueResults.map(({ author, content }) => (\n              <li key={nanoid()}>\n                <ReviewTitle>{author}</ReviewTitle>\n                <TextReview>{content}</TextReview>\n              </li>\n            ))}\n          </ul>\n        </div>\n      );\n    } else {\n      return (\n        <main>\n          {error ? error.message : <p>We couldn't find any reviews</p>}\n        </main>\n      );\n    }\n  }\n}\n","export const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n\nexport const searchParams = new URLSearchParams({\n  api_key: API_KEY,\n  language: 'en',\n});\n\nexport const basicURL = 'https://api.themoviedb.org/3';\n\nexport const basicBigImageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const basicSmallImageURL = 'https://image.tmdb.org/t/p/w200';\n","import {\n  searchParams,\n  basicURL,\n  basicSmallImageURL,\n  basicBigImageURL,\n} from './constants';\nimport hasNotPhotoPerson from '../images/NoPhotoPerson.png';\nimport hasNotFilmImage from '../images/NoFilmImage.png';\n\nexport function fetchData(url, setData, setError) {\n  fetch(url)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong....'));\n    })\n    .then(data => {\n      setData(data);\n    })\n    .catch(error => {\n      setError(error);\n    });\n}\n\nexport function fetchImage(imageUrl, setHoveredImageUrl) {\n  const fetchUrl = basicSmallImageURL + imageUrl;\n\n  fetch(fetchUrl)\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => setHoveredImageUrl(url))\n    .catch(error => console.error(error));\n}\n\nexport function getImageUrl(imagePath, small = false, type = 'person') {\n  if (imagePath) {\n    return small\n      ? basicSmallImageURL + imagePath\n      : basicBigImageURL + imagePath;\n  } else {\n    return type === 'person' ? hasNotPhotoPerson : hasNotFilmImage;\n  }\n}\n\nexport function getExtraInfoUrl(id, type, dataType) {\n  const mediaType = type === 'tv' ? 'tv' : 'movie';\n  const dataAltType = dataType === 'cast' ? 'credits' : 'reviews';\n  const URL = `${basicURL}/${mediaType}/${id}/${dataAltType}?${searchParams}`;\n  return URL;\n}\n\nexport function getTrendsUrl(type, period, language = 'en') {\n  const newSearchParams = new URLSearchParams(searchParams);\n  newSearchParams.set('language', language);\n  const mediaType =\n    type === 'tv' ? 'tv' : type === 'person' ? 'person' : 'movie';\n  const URL = `${basicURL}/trending/${mediaType}/${period}?${newSearchParams}`;\n  return URL;\n}\n","import { Fragment } from 'react';\n\nexport function voteToPersent(vote) {\n  if (vote) {\n    const persentVote = Math.floor(vote * 10);\n    return `${persentVote}%`;\n  }\n  return '--%';\n}\n\nexport function formateDate(date) {\n  if (date) {\n    const newDate = new Date(date);\n    const formattedDate = newDate.toUTCString().slice(5, 16);\n    return formattedDate;\n  }\n  return 'no data';\n}\n\nexport function sortByField(arr, field, order = false) {\n  const direction = order ? 1 : -1;\n  return arr.sort((a, b) => {\n    if (a[field] < b[field]) {\n      return -1 * direction;\n    }\n    if (a[field] > b[field]) {\n      return 1 * direction;\n    }\n    return 0;\n  });\n}\n\nexport function makeNewArray(arr) {\n  const newArr = arr.map(item => {\n    if (item !== null) {\n      return { ...item };\n    } else {\n      return item;\n    }\n  });\n  return newArr;\n}\n\nexport function makeWithoutLowVotes(arr) {\n  const newArr = arr.map(item => {\n    if (item.vote_count < 10) {\n      return { ...item, vote_average: 0 };\n    } else {\n      return item;\n    }\n  });\n  return newArr;\n}\n\nexport function toggleOrder(order) {\n  return !order;\n}\n\nexport const getSortedFilmography = (fieldSorted, list, order) => {\n  let sortedFilmography;\n\n  switch (fieldSorted) {\n    case 'Trends':\n      sortedFilmography = list;\n      break;\n    case 'Rating':\n      const withoutLowVotes = makeWithoutLowVotes(list);\n      sortedFilmography = sortByField(withoutLowVotes, 'vote_average', order);\n      break;\n    case 'Date':\n      const newArrayByDate = makeNewArray(list);\n      sortedFilmography = sortByField(newArrayByDate, 'release_date', order);\n      break;\n    case 'AirDate':\n      const newArrayByAirDate = makeNewArray(list);\n      sortedFilmography = sortByField(\n        newArrayByAirDate,\n        'first_air_date',\n        order\n      );\n      break;\n    case 'Title':\n      const newArrayByTitle = makeNewArray(list);\n      sortedFilmography = sortByField(newArrayByTitle, 'title', order);\n      break;\n    case 'Name':\n      const newArrayByName = makeNewArray(list);\n      sortedFilmography = sortByField(newArrayByName, 'name', order);\n      break;\n\n    default:\n      sortedFilmography = list;\n  }\n\n  return sortedFilmography;\n};\n\nexport function removeDuplicates(arr) {\n  const uniqueArr = [];\n\n  arr.forEach(({ author, content }) => {\n    if (\n      !uniqueArr.find(\n        item => item.author === author && item.content === content\n      )\n    ) {\n      uniqueArr.push({ author, content });\n    }\n  });\n\n  return uniqueArr;\n}\n\nexport const getTrendingTitle = (period, type, isHovered) => {\n  let mediaType;\n\n  switch (type) {\n    case 'tv':\n      mediaType = 'TV Shows';\n      break;\n    case 'movie':\n      mediaType = 'Movies';\n      break;\n    case 'person':\n      mediaType = 'People';\n      break;\n    default:\n      mediaType = 'Movies';\n  }\n\n  const timePeriod = period === 'week' ? 'week' : 'today';\n  return (\n    <Fragment>\n      {mediaType} trending{' '}\n      <span style={{ textDecoration: isHovered ? 'underline' : 'none' }}>\n        {timePeriod}\n      </span>\n    </Fragment>\n  );\n  // `${mediaType} trending ${timePeriod} `;\n};\n\nvar countries = require('i18n-iso-countries');\ncountries.registerLocale(require('i18n-iso-countries/langs/en.json'));\nexport function getCountryName(code, language = 'en') {\n  return countries.getName(code, language);\n}\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["ReviewTitle","styled","TextReview","TVReviews","useState","movieReviews","setMovieReviews","error","setError","id","useParams","useEffect","URL","getExtraInfoUrl","fetchData","results","uniqueResults","removeDuplicates","length","map","author","content","nanoid","message","API_KEY","process","searchParams","URLSearchParams","api_key","language","basicURL","basicBigImageURL","basicSmallImageURL","url","setData","fetch","then","response","ok","json","Promise","reject","Error","data","catch","fetchImage","imageUrl","setHoveredImageUrl","fetchUrl","blob","createObjectURL","console","getImageUrl","imagePath","small","type","hasNotPhotoPerson","hasNotFilmImage","dataType","mediaType","dataAltType","getTrendsUrl","period","newSearchParams","set","voteToPersent","vote","persentVote","Math","floor","formateDate","date","Date","toUTCString","slice","sortByField","arr","field","order","direction","sort","a","b","makeNewArray","item","getSortedFilmography","fieldSorted","list","sortedFilmography","vote_count","vote_average","uniqueArr","forEach","find","push","getTrendingTitle","isHovered","timePeriod","Fragment","style","textDecoration","countries","require","getCountryName","code","getName","registerLocale","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}