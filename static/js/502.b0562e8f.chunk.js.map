{"version":3,"file":"static/js/502.b0562e8f.chunk.js","mappings":"0PAEaA,EAAWC,EAAAA,GAAAA,GAAH,8DAKRC,EAAOD,EAAAA,GAAAA,EAAH,6CAIJE,EAAQF,EAAAA,GAAAA,IAAH,2DAKLG,EAAOH,EAAAA,GAAAA,IAAH,4K,6BCVF,SAASI,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MAQjB,GAPAC,QAAQC,IAAI,aAAcH,IAE1BI,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAG,UAAMC,EAAAA,GAAN,kBAAwBR,EAAxB,oBAAsCS,EAAAA,KAC/CC,EAAAA,EAAAA,IAAUH,EAAKV,EAAcE,EAC9B,GAAE,CAACC,IAEAJ,EAAW,CACb,IAAQe,EAASf,EAATe,KAER,OACE,0BACE,SAACtB,EAAD,UACGsB,EAAKC,KAAI,gBAAGZ,EAAH,EAAGA,GAAIa,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAahB,GAAMiB,MAAO,CAAEC,KAAMhB,GAA1C,UACE,UAACT,EAAD,YACE,SAACD,EAAD,CAAO2B,KAAKC,EAAAA,EAAAA,IAAYN,GAAc,GAAOO,IAAKR,KAClD,uBAAIA,KACJ,UAACtB,EAAD,yBAC4B,KAAdwB,EAAmBA,EAAY,sBAN1Cf,EADD,OAgBjB,CACD,OAAO,yBAAMF,EAAQA,EAAMwB,SAAU,yCACtC,C,wJCzCM,IAAMC,EAAUC,mCAEVf,EAAe,IAAIgB,gBAAgB,CAC9CC,QAASH,IAGEf,EAAW,+BAEXmB,EAAmB,kCAEnBC,EAAqB,iC,gICR3B,SAASlB,EAAUmB,EAAKC,EAAS/B,GACtCgC,MAAMF,GACHG,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,4BACjC,IACAN,MAAK,SAAAO,GACJT,EAAQS,EACT,IACAC,OAAM,SAAA1C,GACLC,EAASD,EACV,GACJ,CAEM,SAAS2C,EAAWC,EAAUC,GACnC,IAAMC,EAAWhB,EAAAA,GAAqBc,EAEtCX,MAAMa,GACHZ,MAAK,SAAAC,GAAQ,OAAIA,EAASY,MAAb,IACbb,MAAK,SAAAa,GAAI,OAAItC,IAAIuC,gBAAgBD,EAAxB,IACTb,MAAK,SAAAH,GAAG,OAAIc,EAAmBd,EAAvB,IACRW,OAAM,SAAA1C,GAAK,OAAIM,QAAQN,MAAMA,EAAlB,GACf,CAEM,SAASsB,EAAY2B,GAA6B,IAAhBC,EAAe,wDACtD,OAAID,EACKC,EACHpB,EAAAA,GAAqBmB,EACrBpB,EAAAA,GAAmBoB,EAEhBE,CAEV,C","sources":["components/MovieCast/MovieCast.styled.jsx","components/MovieCast/MovieCast.jsx","utils/constants.js","utils/fetchData.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const CastList = styled.ul`\n  display: flex;\n  flex-wrap: wrap;\n`;\n\nexport const Text = styled.p`\n  font-size: small;\n`;\n\nexport const Image = styled.img`\n  width: 100px;\n  height: 150px;\n`;\n\nexport const Card = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  text-align: center;\n  font-weight: 500;\n  width: 150px;\n  height: 200px;\n`;\n","import { useParams, Link, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Text, Card, CastList, Image } from './MovieCast.styled';\nimport { fetchData, getImageUrl } from 'utils/fetchData';\nimport { searchParams, basicURL } from 'utils/constants';\n\nexport default function MovieCast() {\n  const [movieCast, setMovieCast] = useState(null);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  console.log('movieCast:', location);\n\n  useEffect(() => {\n    const URL = `${basicURL}/movie/${id}/credits?${searchParams}`;\n    fetchData(URL, setMovieCast, setError);\n  }, [id]);\n\n  if (movieCast) {\n    const { cast } = movieCast;\n\n    return (\n      <div>\n        <CastList>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <li key={id}>\n              <Link to={`/person/${id}`} state={{ from: location }}>\n                <Card>\n                  <Image src={getImageUrl(profile_path, true)} alt={name} />\n                  <p>{name}</p>\n                  <Text>\n                    Character: {character !== '' ? character : 'No results'}\n                  </Text>\n                </Card>\n              </Link>\n            </li>\n          ))}\n        </CastList>\n      </div>\n    );\n  }\n  return <div>{error ? error.message : <p>Searching...</p>}</div>;\n}\n","// export const API_KEY = 'b30750fbe582936755a0930282f9befd';\nexport const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n\nexport const searchParams = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const basicURL = 'https://api.themoviedb.org/3';\n\nexport const basicBigImageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const basicSmallImageURL = 'https://image.tmdb.org/t/p/w200';\n","import { basicSmallImageURL, basicBigImageURL } from './constants';\nimport hasNotPhotoPerson from '../images/NoPhotoPerson.png';\n\nexport function fetchData(url, setData, setError) {\n  fetch(url)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong....'));\n    })\n    .then(data => {\n      setData(data);\n    })\n    .catch(error => {\n      setError(error);\n    });\n}\n\nexport function fetchImage(imageUrl, setHoveredImageUrl) {\n  const fetchUrl = basicSmallImageURL + imageUrl;\n\n  fetch(fetchUrl)\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => setHoveredImageUrl(url))\n    .catch(error => console.error(error));\n}\n\nexport function getImageUrl(profilePath, small = false) {\n  if (profilePath) {\n    return small\n      ? basicSmallImageURL + profilePath\n      : basicBigImageURL + profilePath;\n  } else {\n    return hasNotPhotoPerson;\n  }\n}\n"],"names":["CastList","styled","Text","Image","Card","MovieCast","useState","movieCast","setMovieCast","error","setError","id","useParams","location","useLocation","console","log","useEffect","URL","basicURL","searchParams","fetchData","cast","map","name","profile_path","character","to","state","from","src","getImageUrl","alt","message","API_KEY","process","URLSearchParams","api_key","basicBigImageURL","basicSmallImageURL","url","setData","fetch","then","response","ok","json","Promise","reject","Error","data","catch","fetchImage","imageUrl","setHoveredImageUrl","fetchUrl","blob","createObjectURL","profilePath","small","hasNotPhotoPerson"],"sourceRoot":""}