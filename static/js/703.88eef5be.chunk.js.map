{"version":3,"file":"static/js/703.88eef5be.chunk.js","mappings":"+QAEaA,EAAYC,EAAAA,GAAAA,KAAH,oGAMTC,EAAQD,EAAAA,GAAAA,GAAH,2EAKLE,EAAUF,EAAAA,GAAAA,GAAH,8EAMPG,EAAeH,EAAAA,GAAAA,IAAH,gF,6JCjBZI,EAAaJ,EAAAA,GAAAA,KAAH,0KASVK,EAAcL,EAAAA,GAAAA,MAAH,mHAMXM,EAAaN,EAAAA,GAAAA,EAAH,uF,SCfVO,EAAY,SAAC,GAAyB,IAAvBC,EAAsB,EAAtBA,MAAOC,EAAe,EAAfA,SACjC,OACE,UAACL,EAAD,YACE,SAACE,EAAD,4BACA,SAACD,EAAD,CACEK,KAAK,OACLC,YAAY,mBACZC,aAAcJ,EACdK,SAAU,SAAAC,GAAG,OAAIL,EAASK,EAAIC,OAAOP,MAAxB,MAIpB,E,oBC6CD,EAnDe,WAAO,IAAD,EACnB,GAA4BQ,EAAAA,EAAAA,UAAS,MAArC,eAAOC,EAAP,KAAeC,EAAf,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KACMC,GAAWC,EAAAA,EAAAA,MAEXC,EAAqB,SAAAlB,GACzBe,EAA0B,KAAVf,EAAe,CAAEmB,MAAOnB,GAAU,CAAC,EACpD,EACKoB,EAAU,UAAGN,EAAaO,IAAI,gBAApB,QAAgC,GAchD,OAZAC,EAAAA,EAAAA,YAAU,WACR,IAAMR,EAAe,IAAIS,gBAAgB,CACvCC,QAASC,EAAAA,GACTN,MAAOC,IAEHM,EAAG,UAAMC,EAAAA,GAAN,yBAA+Bb,GAErB,KAAfM,GAAoC,OAAfA,IACvBQ,EAAAA,EAAAA,GAAUF,EAAKhB,EAAWE,EAE7B,GAAE,CAACQ,IAEAX,GAEA,UAAC,KAAD,YACE,SAACV,EAAD,CAAWC,MAAOoB,EAAYnB,SAAUiB,KACxC,wBACGT,EAAOoB,QAAQC,KAAI,gBAAGC,EAAH,EAAGA,GAAIC,EAAP,EAAOA,MAAOC,EAAd,EAAcA,aAAd,OAClB,UAAC,KAAD,YACE,SAAC,MAAD,KACA,UAAC,KAAD,CAAMC,GAAE,UAAKH,GAAMI,MAAO,CAAEC,KAAMpB,GAAlC,UACGgB,EADH,KACYC,EAAaI,MAAM,EAAG,GADlC,SAFYN,EADI,UAa1B,SAAC,KAAD,UACGpB,EACCA,EAAM2B,SAEN,SAACvC,EAAD,CAAWE,SAAUmB,EAAYmB,eAAgBrB,KAIxD,C,wJCzDM,IAAMO,EAAU,mCAEVX,EAAe,IAAIS,gBAAgB,CAC9CC,QAASC,IAGEE,EAAW,+BAEXa,EAAmB,kCAEnBC,EAAqB,iC,uBCV3B,SAASb,EAAUc,EAAKC,EAAS/B,GACtCgC,MAAMF,GACHG,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,4BACjC,IACAN,MAAK,SAAAO,GACJT,EAAQS,EACT,IACAC,OAAM,SAAA1C,GACLC,EAASD,EACV,GACJ,C","sources":["pages/Home/Home.styled.jsx","components/SearchBar/SearchBar.styled.jsx","components/SearchBar/SearchBar.jsx","pages/Movies/Movies.jsx","utils/constants.js","utils/fetchData.js"],"sourcesContent":["import styled from 'styled-components';\n\nexport const Container = styled.main`\n  padding-left: 20px;\n  padding-top: 5px;\n  background-color: cadetblue;\n`;\n\nexport const Title = styled.h1`\n  padding: 10px 0 10px 0;\n  font-size: xx-large;\n`;\n\nexport const LiDecor = styled.li`\n  display: flex;\n  align-items: start;\n  gap: 5px;\n`;\n\nexport const ButtonsThumb = styled.div`\n  display: flex;\n  gap: 15px;\n  margin: 10px 0 0 5px;\n`;\n","import styled from 'styled-components';\n\nexport const FormStyled = styled.form`\n  min-width: 200px;\n  max-width: 280px;\n  gap: 5px;\n  display: flex;\n  flex-direction: column;\n  align-items: left;\n  margin-bottom: 20px;\n`;\nexport const InputStyled = styled.input`\n  min-height: 30px;\n  min-width: 260px;\n  border-radius: 5px;\n  padding: 0 5px 0 15px;\n`;\nexport const SearchText = styled.p`\n  font-weight: 500;\n  font-size: large;\n  margin-left: 5px;\n`;\n","import { FormStyled, SearchText, InputStyled } from './SearchBar.styled';\n\nexport const SearchBar = ({ value, onSearch }) => {\n  return (\n    <FormStyled>\n      <SearchText>Search movie</SearchText>\n      <InputStyled\n        type=\"text\"\n        placeholder=\"Enter movie name\"\n        defaultValue={value}\n        onChange={evt => onSearch(evt.target.value)}\n      />\n    </FormStyled>\n  );\n};\n","import { Container, LiDecor } from 'pages/Home/Home.styled';\nimport { Link, useSearchParams, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { HiFilm } from 'react-icons/hi';\nimport { SearchBar } from '../../components/SearchBar/SearchBar';\nimport { fetchData } from 'utils/fetchData';\nimport { API_KEY, basicURL } from 'utils/constants';\n\nconst Movies = () => {\n  const [movies, setMovies] = useState(null);\n  const [error, setError] = useState(null);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  const handleSearchParams = value => {\n    setSearchParams(value !== '' ? { query: value } : {});\n  };\n  const queryInput = searchParams.get('query') ?? '';\n\n  useEffect(() => {\n    const searchParams = new URLSearchParams({\n      api_key: API_KEY,\n      query: queryInput,\n    });\n    const URL = `${basicURL}/search/movie?${searchParams}`;\n\n    if (queryInput !== '' || queryInput !== null) {\n      fetchData(URL, setMovies, setError);\n    }\n  }, [queryInput]);\n\n  if (movies) {\n    return (\n      <Container>\n        <SearchBar value={queryInput} onSearch={handleSearchParams} />\n        <ul>\n          {movies.results.map(({ id, title, release_date }) => (\n            <LiDecor key={id}>\n              <HiFilm />\n              <Link to={`${id}`} state={{ from: location }}>\n                {title} ({release_date.slice(0, 4)})\n              </Link>\n            </LiDecor>\n          ))}\n        </ul>\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      {error ? (\n        error.message\n      ) : (\n        <SearchBar onSearch={queryInput} onSearchParams={handleSearchParams} />\n      )}\n    </Container>\n  );\n};\n\nexport default Movies;\n","export const API_KEY = 'b30750fbe582936755a0930282f9befd';\n\nexport const searchParams = new URLSearchParams({\n  api_key: API_KEY,\n});\n\nexport const basicURL = 'https://api.themoviedb.org/3';\n\nexport const basicBigImageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const basicSmallImageURL = 'https://image.tmdb.org/t/p/w200';\n","export function fetchData(url, setData, setError) {\n  fetch(url)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong....'));\n    })\n    .then(data => {\n      setData(data);\n    })\n    .catch(error => {\n      setError(error);\n    });\n}\n"],"names":["Container","styled","Title","LiDecor","ButtonsThumb","FormStyled","InputStyled","SearchText","SearchBar","value","onSearch","type","placeholder","defaultValue","onChange","evt","target","useState","movies","setMovies","error","setError","useSearchParams","searchParams","setSearchParams","location","useLocation","handleSearchParams","query","queryInput","get","useEffect","URLSearchParams","api_key","API_KEY","URL","basicURL","fetchData","results","map","id","title","release_date","to","state","from","slice","message","onSearchParams","basicBigImageURL","basicSmallImageURL","url","setData","fetch","then","response","ok","json","Promise","reject","Error","data","catch"],"sourceRoot":""}