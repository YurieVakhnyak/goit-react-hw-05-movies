{"version":3,"file":"static/js/620.f5fc5d60.chunk.js","mappings":"+OAKe,SAASA,IACtB,OAAkCC,EAAAA,EAAAA,UAAS,MAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAA0BF,EAAAA,EAAAA,UAAS,MAAnC,eAAOG,EAAP,KAAcC,EAAd,KACQC,GAAOC,EAAAA,EAAAA,MAAPD,GACFE,GAAWC,EAAAA,EAAAA,MAQjB,GAPAC,QAAQC,IAAI,aAAcH,IAE1BI,EAAAA,EAAAA,YAAU,WACR,IAAMC,GAAMC,EAAAA,EAAAA,IAAgBR,EAAI,QAAS,SACzCS,EAAAA,EAAAA,IAAUF,EAAKV,EAAcE,EAC9B,GAAE,CAACC,IAEAJ,EAAW,CACb,IAAQc,EAASd,EAATc,KAER,OACE,0BACE,SAAC,KAAD,UACGA,EAAKC,KAAI,gBAAGX,EAAH,EAAGA,GAAIY,EAAP,EAAOA,KAAMC,EAAb,EAAaA,aAAcC,EAA3B,EAA2BA,UAA3B,OACR,yBACE,SAAC,KAAD,CAAMC,GAAE,kBAAaf,GAAMgB,MAAO,CAAEC,KAAMf,GAA1C,UACE,UAAC,KAAD,YACE,SAAC,KAAD,CAAOgB,KAAKC,EAAAA,EAAAA,IAAYN,GAAc,GAAOO,IAAKR,KAClD,uBAAIA,KACJ,UAAC,KAAD,yBAC4B,KAAdE,EAAmBA,EAAY,sBAN1Cd,EADD,OAgBjB,CACD,OAAO,yBAAMF,EAAQA,EAAMuB,SAAU,yCACtC,C,wJCzCM,IAAMC,EAAUC,mCAEVC,EAAe,IAAIC,gBAAgB,CAC9CC,QAASJ,EACTK,SAAU,OAGCC,EAAW,+BAEXC,EAAmB,kCAEnBC,EAAqB,iC,0LCF3B,SAASrB,EAAUsB,EAAKC,EAASjC,GACtCkC,MAAMF,GACHG,MAAK,SAAAC,GACJ,OAAIA,EAASC,GACJD,EAASE,OAEXC,QAAQC,OAAO,IAAIC,MAAM,4BACjC,IACAN,MAAK,SAAAO,GACJT,EAAQS,EACT,IACAC,OAAM,SAAA5C,GACLC,EAASD,EACV,GACJ,CAEM,SAAS6C,EAAWC,EAAUC,GACnC,IAAMC,EAAWhB,EAAAA,GAAqBc,EAEtCX,MAAMa,GACHZ,MAAK,SAAAC,GAAQ,OAAIA,EAASY,MAAb,IACbb,MAAK,SAAAa,GAAI,OAAIxC,IAAIyC,gBAAgBD,EAAxB,IACTb,MAAK,SAAAH,GAAG,OAAIc,EAAmBd,EAAvB,IACRW,OAAM,SAAA5C,GAAK,OAAIM,QAAQN,MAAMA,EAAlB,GACf,CAEM,SAASqB,EAAY8B,GAA4C,IAAjCC,EAAgC,wDAAjBC,EAAiB,uDAAV,SAC3D,OAAIF,EACKC,EACHpB,EAAAA,GAAqBmB,EACrBpB,EAAAA,GAAmBoB,EAEP,WAATE,EAAoBC,EAAoBC,CAElD,CAEM,SAAS7C,EAAgBR,EAAImD,EAAMG,GACxC,IAAMC,EAAqB,OAATJ,EAAgB,KAAO,QACnCK,EAA2B,SAAbF,EAAsB,UAAY,UAEtD,MADS,UAAM1B,EAAAA,GAAN,YAAkB2B,EAAlB,YAA+BvD,EAA/B,YAAqCwD,EAArC,YAAoDhC,EAAAA,GAE9D,CAEM,SAASiC,EAAaN,EAAMO,GAA0B,IAAlB/B,EAAiB,uDAAN,KAC9CgC,EAAkB,IAAIlC,gBAAgBD,EAAAA,IAC5CmC,EAAgBC,IAAI,WAAYjC,GAChC,IAAM4B,EACK,OAATJ,EAAgB,KAAgB,WAATA,EAAoB,SAAW,QAClD5C,EAAG,UAAMqB,EAAAA,GAAN,qBAA2B2B,EAA3B,YAAwCG,EAAxC,YAAkDC,GAC3D,OAAOpD,CACR,C","sources":["components/MovieCast/MovieCast.jsx","utils/constants.js","utils/fetchData.js"],"sourcesContent":["import { useParams, Link, useLocation } from 'react-router-dom';\nimport { useState, useEffect } from 'react';\nimport { Text, Card, CastList, Image } from './MovieCast.styled';\nimport { fetchData, getImageUrl, getExtraInfoUrl } from 'utils/fetchData';\n\nexport default function MovieCast() {\n  const [movieCast, setMovieCast] = useState(null);\n  const [error, setError] = useState(null);\n  const { id } = useParams();\n  const location = useLocation();\n  console.log('movieCast:', location);\n\n  useEffect(() => {\n    const URL = getExtraInfoUrl(id, 'movie', 'cast');\n    fetchData(URL, setMovieCast, setError);\n  }, [id]);\n\n  if (movieCast) {\n    const { cast } = movieCast;\n\n    return (\n      <div>\n        <CastList>\n          {cast.map(({ id, name, profile_path, character }) => (\n            <li key={id}>\n              <Link to={`/person/${id}`} state={{ from: location }}>\n                <Card>\n                  <Image src={getImageUrl(profile_path, true)} alt={name} />\n                  <p>{name}</p>\n                  <Text>\n                    Character: {character !== '' ? character : 'No results'}\n                  </Text>\n                </Card>\n              </Link>\n            </li>\n          ))}\n        </CastList>\n      </div>\n    );\n  }\n  return <div>{error ? error.message : <p>Searching...</p>}</div>;\n}\n","export const API_KEY = process.env.REACT_APP_TMDB_API_KEY;\n\nexport const searchParams = new URLSearchParams({\n  api_key: API_KEY,\n  language: 'en',\n});\n\nexport const basicURL = 'https://api.themoviedb.org/3';\n\nexport const basicBigImageURL = 'https://image.tmdb.org/t/p/w500';\n\nexport const basicSmallImageURL = 'https://image.tmdb.org/t/p/w200';\n","import {\n  searchParams,\n  basicURL,\n  basicSmallImageURL,\n  basicBigImageURL,\n} from './constants';\nimport hasNotPhotoPerson from '../images/NoPhotoPerson.png';\nimport hasNotFilmImage from '../images/NoFilmImage.png';\n\nexport function fetchData(url, setData, setError) {\n  fetch(url)\n    .then(response => {\n      if (response.ok) {\n        return response.json();\n      }\n      return Promise.reject(new Error('Something went wrong....'));\n    })\n    .then(data => {\n      setData(data);\n    })\n    .catch(error => {\n      setError(error);\n    });\n}\n\nexport function fetchImage(imageUrl, setHoveredImageUrl) {\n  const fetchUrl = basicSmallImageURL + imageUrl;\n\n  fetch(fetchUrl)\n    .then(response => response.blob())\n    .then(blob => URL.createObjectURL(blob))\n    .then(url => setHoveredImageUrl(url))\n    .catch(error => console.error(error));\n}\n\nexport function getImageUrl(imagePath, small = false, type = 'person') {\n  if (imagePath) {\n    return small\n      ? basicSmallImageURL + imagePath\n      : basicBigImageURL + imagePath;\n  } else {\n    return type === 'person' ? hasNotPhotoPerson : hasNotFilmImage;\n  }\n}\n\nexport function getExtraInfoUrl(id, type, dataType) {\n  const mediaType = type === 'tv' ? 'tv' : 'movie';\n  const dataAltType = dataType === 'cast' ? 'credits' : 'reviews';\n  const URL = `${basicURL}/${mediaType}/${id}/${dataAltType}?${searchParams}`;\n  return URL;\n}\n\nexport function getTrendsUrl(type, period, language = 'en') {\n  const newSearchParams = new URLSearchParams(searchParams);\n  newSearchParams.set('language', language);\n  const mediaType =\n    type === 'tv' ? 'tv' : type === 'person' ? 'person' : 'movie';\n  const URL = `${basicURL}/trending/${mediaType}/${period}?${newSearchParams}`;\n  return URL;\n}\n"],"names":["MovieCast","useState","movieCast","setMovieCast","error","setError","id","useParams","location","useLocation","console","log","useEffect","URL","getExtraInfoUrl","fetchData","cast","map","name","profile_path","character","to","state","from","src","getImageUrl","alt","message","API_KEY","process","searchParams","URLSearchParams","api_key","language","basicURL","basicBigImageURL","basicSmallImageURL","url","setData","fetch","then","response","ok","json","Promise","reject","Error","data","catch","fetchImage","imageUrl","setHoveredImageUrl","fetchUrl","blob","createObjectURL","imagePath","small","type","hasNotPhotoPerson","hasNotFilmImage","dataType","mediaType","dataAltType","getTrendsUrl","period","newSearchParams","set"],"sourceRoot":""}